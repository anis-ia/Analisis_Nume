
import numpy as np

def is_diagonally_dominant(A):
    return np.all(np.abs(np.diag(A)) >= np.sum(np.abs(A), axis=1) - np.abs(np.diag(A)))

def calculate_alpha(M):
    return np.max(np.abs(np.linalg.eigvals(M)))

def jacobi_analysis(A, b):
    print("Análisis de convergencia del método de Jacobi")
    print("\n1. Verificar si la matriz tiene diagonal predominante:")
    
    if is_diagonally_dominant(A):
        print("La matriz tiene diagonal predominante.")
        print("Conclusión: El sistema converge porque la diagonal es predominante.")
    else:
        print("La matriz no tiene diagonal predominante.")
        print("Se necesita un análisis adicional para determinar la convergencia.")

    print("\n2. Despejar los elementos de la diagonal:")
    D = np.diag(np.diag(A))
    L = np.tril(A, k=-1)
    U = np.triu(A, k=1)
    D_inv = np.linalg.inv(D)
    M = -D_inv @ (L + U)
    c = D_inv @ b

    print("M =")
    print(M)
    print("\nc =")
    print(c)

    print("\n3. Encontrar el alfa (indicador de convergencia):")
    alpha = calculate_alpha(M)
    print(f"Alfa = {alpha}")

    if alpha < 1:
        print("El sistema converge (alfa < 1)")
    elif alpha == 1:
        print("El sistema puede converger lentamente (alfa = 1)")
    else:
        print("El sistema no converge (alfa > 1)")

    return M, c, alpha

A = np.array([
    [0.52, 0.3, 0.18],
    [0.2, 0.5, 0.3],
    [0.25, 0.2, 0.55]
])

b = np.array([4800, 5810, 5690])

M, c, alpha = jacobi_analysis(A, b)

x = np.zeros_like(b)
iterations = 10

print("\nIteraciones del método de Jacobi:")
for i in range(iterations):
    x_new = M @ x + c
    print(f"Iteración {i+1}: {x_new}")
    x = x_new
